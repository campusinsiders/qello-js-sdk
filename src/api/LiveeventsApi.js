/**
 * Qello API
 * REST API <!-- <br/> <br/> <a href='#' id='' onclick='showRestJSONObjectsHttpAPI();'>Qello API (JSON Requests)</a> -->
 *
 * OpenAPI spec version: 1.1.4
 * Contact: contact@qello.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ContentResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ContentResult'));
  } else {
    // Browser globals (root is window)
    if (!root.QelloApi) {
      root.QelloApi = {};
    }
    root.QelloApi.LiveeventsApi = factory(root.QelloApi.ApiClient, root.QelloApi.ContentResult);
  }
}(this, function(ApiClient, ContentResult) {
  'use strict';

  /**
   * Liveevents service.
   * @module api/LiveeventsApi
   * @version 1.1.4
   */

  /**
   * Constructs a new LiveeventsApi. 
   * @alias module:api/LiveeventsApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getLiveEvents operation.
     * @callback module:api/LiveeventsApi~getLiveEventsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContentResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Live Events
     * Get Live Events
     * @param {String} token Token
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id Live Event Id
     * @param {Number} opts.limit Limit
     * @param {Number} opts.offset Offset
     * @param {String} opts.order Order (Field to Order By)
     * @param {Number} opts.tag Filter by Tag [Tag Id &#x3D;&gt; Tag Value]
     * @param {Number} opts.dateFrom Live Event Date From (Timestamp)
     * @param {Number} opts.dateTo Live Event Date To (Timestamp)
     * @param {module:api/LiveeventsApi~getLiveEventsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContentResult}
     */
    this.getLiveEvents = function(token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling getLiveEvents");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token,
        'id': opts['id'],
        'limit': opts['limit'],
        'offset': opts['offset'],
        'order': opts['order'],
        'tag[]': opts['tag'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = ContentResult;

      return this.apiClient.callApi(
        '/liveevents/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
