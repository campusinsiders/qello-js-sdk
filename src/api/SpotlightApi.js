/**
 * Qello API
 * REST API <!-- <br/> <br/> <a href='#' id='' onclick='showRestJSONObjectsHttpAPI();'>Qello API (JSON Requests)</a> -->
 *
 * OpenAPI spec version: 1.1.4
 * Contact: contact@qello.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/SpotlightResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/SpotlightResult'));
  } else {
    // Browser globals (root is window)
    if (!root.QelloApi) {
      root.QelloApi = {};
    }
    root.QelloApi.SpotlightApi = factory(root.QelloApi.ApiClient, root.QelloApi.SpotlightResult);
  }
}(this, function(ApiClient, SpotlightResult) {
  'use strict';

  /**
   * Spotlight service.
   * @module api/SpotlightApi
   * @version 1.1.4
   */

  /**
   * Constructs a new SpotlightApi. 
   * @alias module:api/SpotlightApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getSpotlight operation.
     * @callback module:api/SpotlightApi~getSpotlightCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SpotlightResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Spotlight - Prefifined Filters over assets, collections, etc.
     * Get Spotlight Lists
     * @param {String} token Token
     * @param {Object} opts Optional parameters
     * @param {String} opts.location Location (Spotlight for a specific location - Home, Explore etc.)
     * @param {module:api/SpotlightApi~getSpotlightCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SpotlightResult}
     */
    this.getSpotlight = function(token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling getSpotlight");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token,
        'location': opts['location']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = SpotlightResult;

      return this.apiClient.callApi(
        '/spotlight/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
