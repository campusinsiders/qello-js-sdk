/**
 * Qello API
 * REST API <!-- <br/> <br/> <a href='#' id='' onclick='showRestJSONObjectsHttpAPI();'>Qello API (JSON Requests)</a> -->
 *
 * OpenAPI spec version: 1.1.4
 * Contact: contact@qello.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RetokenResult', 'model/TokenResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RetokenResult'), require('../model/TokenResult'));
  } else {
    // Browser globals (root is window)
    if (!root.QelloApi) {
      root.QelloApi = {};
    }
    root.QelloApi.TokenApi = factory(root.QelloApi.ApiClient, root.QelloApi.RetokenResult, root.QelloApi.TokenResult);
  }
}(this, function(ApiClient, RetokenResult, TokenResult) {
  'use strict';

  /**
   * Token service.
   * @module api/TokenApi
   * @version 1.1.4
   */

  /**
   * Constructs a new TokenApi. 
   * @alias module:api/TokenApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the getToken operation.
     * @callback module:api/TokenApi~getTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TokenResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Guest Token
     * Get a Guest Token
     * @param {module:model/String} deviceDataDeviceName Device Name (Predefined Device Type - iPhone, Android, etc.)
     * @param {String} deviceDataDeviceId Device Id (Unique Device Identificator)
     * @param {String} deviceDataAppVersion Application Version
     * @param {module:api/TokenApi~getTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TokenResult}
     */
    this.getToken = function(deviceDataDeviceName, deviceDataDeviceId, deviceDataAppVersion, callback) {
      var postBody = null;

      // verify the required parameter 'deviceDataDeviceName' is set
      if (deviceDataDeviceName == undefined || deviceDataDeviceName == null) {
        throw new Error("Missing the required parameter 'deviceDataDeviceName' when calling getToken");
      }

      // verify the required parameter 'deviceDataDeviceId' is set
      if (deviceDataDeviceId == undefined || deviceDataDeviceId == null) {
        throw new Error("Missing the required parameter 'deviceDataDeviceId' when calling getToken");
      }

      // verify the required parameter 'deviceDataAppVersion' is set
      if (deviceDataAppVersion == undefined || deviceDataAppVersion == null) {
        throw new Error("Missing the required parameter 'deviceDataAppVersion' when calling getToken");
      }


      var pathParams = {
      };
      var queryParams = {
        'device_data[device_name]': deviceDataDeviceName,
        'device_data[device_id]': deviceDataDeviceId,
        'device_data[app_version]': deviceDataAppVersion
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = TokenResult;

      return this.apiClient.callApi(
        '/token/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the regenerateToken operation.
     * @callback module:api/TokenApi~regenerateTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RetokenResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Regenerate Token
     * Issue a New Token from Refresh Key for Specific Device. &lt;br/&gt;&lt;br/&gt; Note : For Secodary Devices (Devices/Platforms that exist only as Streaming clients and need a Source Device to work) &lt;br/&gt; send a Device Name, Device Id, App Version etc.
     * @param {String} refreshKey Refresh Key (Used to get new token)
     * @param {String} deviceId Device Id (Unique Device Identificator)
     * @param {Object} opts Optional parameters
     * @param {String} opts.profileId Profile Id (For regeneration of Child Token)
     * @param {String} opts.deviceName Device Name (Predefined Device Type - iPhone, Android, etc.)
     * @param {String} opts.appVersion Application Version
     * @param {module:api/TokenApi~regenerateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RetokenResult}
     */
    this.regenerateToken = function(refreshKey, deviceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'refreshKey' is set
      if (refreshKey == undefined || refreshKey == null) {
        throw new Error("Missing the required parameter 'refreshKey' when calling regenerateToken");
      }

      // verify the required parameter 'deviceId' is set
      if (deviceId == undefined || deviceId == null) {
        throw new Error("Missing the required parameter 'deviceId' when calling regenerateToken");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'refresh_key': refreshKey,
        'profile_id': opts['profileId'],
        'device_name': opts['deviceName'],
        'device_id': deviceId,
        'app_version': opts['appVersion']
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = RetokenResult;

      return this.apiClient.callApi(
        '/token/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
