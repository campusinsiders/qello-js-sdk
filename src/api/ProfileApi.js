/**
 * Qello API
 * REST API <!-- <br/> <br/> <a href='#' id='' onclick='showRestJSONObjectsHttpAPI();'>Qello API (JSON Requests)</a> -->
 *
 * OpenAPI spec version: 1.1.4
 * Contact: contact@qello.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ProfileResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ProfileResult'));
  } else {
    // Browser globals (root is window)
    if (!root.QelloApi) {
      root.QelloApi = {};
    }
    root.QelloApi.ProfileApi = factory(root.QelloApi.ApiClient, root.QelloApi.ProfileResult);
  }
}(this, function(ApiClient, ProfileResult) {
  'use strict';

  /**
   * Profile service.
   * @module api/ProfileApi
   * @version 1.1.4
   */

  /**
   * Constructs a new ProfileApi. 
   * @alias module:api/ProfileApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the createProfile operation.
     * @callback module:api/ProfileApi~createProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a Child Profile for User
     * Create a New Profile
     * @param {String} token Token
     * @param {String} fullName Full Name
     * @param {Object} opts Optional parameters
     * @param {Number} opts.avatarId Avatar Id
     * @param {String} opts.nickName Nick Name
     * @param {String} opts.yearBirth Year of Birth
     * @param {module:api/ProfileApi~createProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileResult}
     */
    this.createProfile = function(token, fullName, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling createProfile");
      }

      // verify the required parameter 'fullName' is set
      if (fullName == undefined || fullName == null) {
        throw new Error("Missing the required parameter 'fullName' when calling createProfile");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token
      };
      var headerParams = {
      };
      var formParams = {
        'full_name': fullName,
        'avatar_id': opts['avatarId'],
        'nick_name': opts['nickName'],
        'year_birth': opts['yearBirth']
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = ProfileResult;

      return this.apiClient.callApi(
        '/profile/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteProfile operation.
     * @callback module:api/ProfileApi~deleteProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deactivate Profile
     * Mark a Profile as Inactive
     * @param {String} token Token
     * @param {Number} id The Profile Id to be deleted.
     * @param {module:api/ProfileApi~deleteProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileResult}
     */
    this.deleteProfile = function(token, id, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling deleteProfile");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling deleteProfile");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token,
        'id': id
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = ProfileResult;

      return this.apiClient.callApi(
        '/profile/', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getProfiles operation.
     * @callback module:api/ProfileApi~getProfilesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Profiles
     * Get the Profiles belonging to a User. Single Profile if profile_id is sent.
     * @param {String} token Token
     * @param {Object} opts Optional parameters
     * @param {Number} opts.id Profile Id
     * @param {module:api/ProfileApi~getProfilesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileResult}
     */
    this.getProfiles = function(token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling getProfiles");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token,
        'id': opts['id']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = ProfileResult;

      return this.apiClient.callApi(
        '/profile/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateProfile operation.
     * @callback module:api/ProfileApi~updateProfileCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ProfileResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update Child Profile for User
     * Update Profile
     * @param {String} token Token
     * @param {Number} id Profile Id
     * @param {Object} opts Optional parameters
     * @param {String} opts.fullName Full Name
     * @param {Number} opts.avatarId Avatar Id
     * @param {String} opts.nickName Nick Name
     * @param {String} opts.yearBirth Year of Birth
     * @param {module:api/ProfileApi~updateProfileCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ProfileResult}
     */
    this.updateProfile = function(token, id, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling updateProfile");
      }

      // verify the required parameter 'id' is set
      if (id == undefined || id == null) {
        throw new Error("Missing the required parameter 'id' when calling updateProfile");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token
      };
      var headerParams = {
      };
      var formParams = {
        'id': id,
        'full_name': opts['fullName'],
        'avatar_id': opts['avatarId'],
        'nick_name': opts['nickName'],
        'year_birth': opts['yearBirth']
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = ProfileResult;

      return this.apiClient.callApi(
        '/profile/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
