/**
 * Qello API
 * REST API <!-- <br/> <br/> <a href='#' id='' onclick='showRestJSONObjectsHttpAPI();'>Qello API (JSON Requests)</a> -->
 *
 * OpenAPI spec version: 1.1.4
 * Contact: contact@qello.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/GenerateTokenResult', 'model/LoginObject', 'model/PasswordRequestResult', 'model/PasswordResetResult', 'model/RegisterResult', 'model/UserResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/GenerateTokenResult'), require('../model/LoginObject'), require('../model/PasswordRequestResult'), require('../model/PasswordResetResult'), require('../model/RegisterResult'), require('../model/UserResult'));
  } else {
    // Browser globals (root is window)
    if (!root.QelloApi) {
      root.QelloApi = {};
    }
    root.QelloApi.UsersApi = factory(root.QelloApi.ApiClient, root.QelloApi.GenerateTokenResult, root.QelloApi.LoginObject, root.QelloApi.PasswordRequestResult, root.QelloApi.PasswordResetResult, root.QelloApi.RegisterResult, root.QelloApi.UserResult);
  }
}(this, function(ApiClient, GenerateTokenResult, LoginObject, PasswordRequestResult, PasswordResetResult, RegisterResult, UserResult) {
  'use strict';

  /**
   * Users service.
   * @module api/UsersApi
   * @version 1.1.4
   */

  /**
   * Constructs a new UsersApi. 
   * @alias module:api/UsersApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the generateToken operation.
     * @callback module:api/UsersApi~generateTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenerateTokenResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Generate Profile Token
     * Generates a token for a Profile by User token.
     * @param {String} token Token
     * @param {Number} profileId Profile Id
     * @param {module:api/UsersApi~generateTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenerateTokenResult}
     */
    this.generateToken = function(token, profileId, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling generateToken");
      }

      // verify the required parameter 'profileId' is set
      if (profileId == undefined || profileId == null) {
        throw new Error("Missing the required parameter 'profileId' when calling generateToken");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token,
        'profile_id': profileId
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = GenerateTokenResult;

      return this.apiClient.callApi(
        '/users/login/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUser operation.
     * @callback module:api/UsersApi~getUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get User Information
     * User and Session Information.
     * @param {String} token Token
     * @param {module:api/UsersApi~getUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginObject}
     */
    this.getUser = function(token, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling getUser");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = LoginObject;

      return this.apiClient.callApi(
        '/users/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginIos operation.
     * @callback module:api/UsersApi~loginIosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User Login by iTunes Receipt
     * User Login by iTunes Receipt. Used in IOS Applications for automatic login.
     * @param {String} receipt iTunes Receipt
     * @param {module:model/String} deviceDataDeviceName Device Name (Predefined Device Type - iPhone, Android, etc.)
     * @param {String} deviceDataDeviceId Device Id (Unique Device Identificator)
     * @param {Object} opts Optional parameters
     * @param {String} opts.deviceDataAppVersion Application Version (Mandatory)
     * @param {module:api/UsersApi~loginIosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginObject}
     */
    this.loginIos = function(receipt, deviceDataDeviceName, deviceDataDeviceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'receipt' is set
      if (receipt == undefined || receipt == null) {
        throw new Error("Missing the required parameter 'receipt' when calling loginIos");
      }

      // verify the required parameter 'deviceDataDeviceName' is set
      if (deviceDataDeviceName == undefined || deviceDataDeviceName == null) {
        throw new Error("Missing the required parameter 'deviceDataDeviceName' when calling loginIos");
      }

      // verify the required parameter 'deviceDataDeviceId' is set
      if (deviceDataDeviceId == undefined || deviceDataDeviceId == null) {
        throw new Error("Missing the required parameter 'deviceDataDeviceId' when calling loginIos");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'receipt': receipt,
        'device_data[device_name]': deviceDataDeviceName,
        'device_data[device_id]': deviceDataDeviceId,
        'device_data[app_version]': opts['deviceDataAppVersion']
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = LoginObject;

      return this.apiClient.callApi(
        '/users/login/ios', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginPartner operation.
     * @callback module:api/UsersApi~loginPartnerCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User Login with Partner Credentials
     * User Login with Partner Credentials
     * @param {String} partnerId Partner Id.
     * @param {String} providerId Provider Id. Partner&#39;s Service Provider Method.
     * @param {module:model/String} deviceDataDeviceName Device Name (Predefined Device Type - iPhone, Android, etc.)
     * @param {String} deviceDataDeviceId Device Id (Unique Device Identificator)
     * @param {Object} opts Optional parameters
     * @param {String} opts.email Email (Partner-specific parameter)
     * @param {String} opts.password Password (Partner-specific parameter)
     * @param {String} opts.deviceDataAppVersion Application Version (Mandatory)
     * @param {module:api/UsersApi~loginPartnerCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginObject}
     */
    this.loginPartner = function(partnerId, providerId, deviceDataDeviceName, deviceDataDeviceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'partnerId' is set
      if (partnerId == undefined || partnerId == null) {
        throw new Error("Missing the required parameter 'partnerId' when calling loginPartner");
      }

      // verify the required parameter 'providerId' is set
      if (providerId == undefined || providerId == null) {
        throw new Error("Missing the required parameter 'providerId' when calling loginPartner");
      }

      // verify the required parameter 'deviceDataDeviceName' is set
      if (deviceDataDeviceName == undefined || deviceDataDeviceName == null) {
        throw new Error("Missing the required parameter 'deviceDataDeviceName' when calling loginPartner");
      }

      // verify the required parameter 'deviceDataDeviceId' is set
      if (deviceDataDeviceId == undefined || deviceDataDeviceId == null) {
        throw new Error("Missing the required parameter 'deviceDataDeviceId' when calling loginPartner");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'partner_id': partnerId,
        'provider_id': providerId,
        'email': opts['email'],
        'password': opts['password'],
        'device_data[device_name]': deviceDataDeviceName,
        'device_data[device_id]': deviceDataDeviceId,
        'device_data[app_version]': opts['deviceDataAppVersion']
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = LoginObject;

      return this.apiClient.callApi(
        '/users/login/partner', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the loginUser operation.
     * @callback module:api/UsersApi~loginUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LoginObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * User Login
     * User Login API call
     * @param {String} email Email
     * @param {String} password Password
     * @param {module:model/String} deviceDataDeviceName Device Name (Predefined Device Type - iPhone, Android, etc.)
     * @param {String} deviceDataDeviceId Device Id (Unique Device Identificator)
     * @param {Object} opts Optional parameters
     * @param {String} opts.deviceDataAppVersion Application Version (Mandatory)
     * @param {String} opts.deviceDataOsName OS Name
     * @param {String} opts.deviceDataOsVersion OS Version Number
     * @param {String} opts.deviceDataProcesors Device Processors
     * @param {String} opts.deviceDataMacaddress Device Macaddress
     * @param {String} opts.deviceDataArchitecture Device Architecture
     * @param {String} opts.deviceDataLocale Device Locale
     * @param {module:api/UsersApi~loginUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LoginObject}
     */
    this.loginUser = function(email, password, deviceDataDeviceName, deviceDataDeviceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email == undefined || email == null) {
        throw new Error("Missing the required parameter 'email' when calling loginUser");
      }

      // verify the required parameter 'password' is set
      if (password == undefined || password == null) {
        throw new Error("Missing the required parameter 'password' when calling loginUser");
      }

      // verify the required parameter 'deviceDataDeviceName' is set
      if (deviceDataDeviceName == undefined || deviceDataDeviceName == null) {
        throw new Error("Missing the required parameter 'deviceDataDeviceName' when calling loginUser");
      }

      // verify the required parameter 'deviceDataDeviceId' is set
      if (deviceDataDeviceId == undefined || deviceDataDeviceId == null) {
        throw new Error("Missing the required parameter 'deviceDataDeviceId' when calling loginUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'email': email,
        'password': password,
        'device_data[device_name]': deviceDataDeviceName,
        'device_data[device_id]': deviceDataDeviceId,
        'device_data[app_version]': opts['deviceDataAppVersion'],
        'device_data[os_name]': opts['deviceDataOsName'],
        'device_data[os_version]': opts['deviceDataOsVersion'],
        'device_data[procesors]': opts['deviceDataProcesors'],
        'device_data[macaddress]': opts['deviceDataMacaddress'],
        'device_data[architecture]': opts['deviceDataArchitecture'],
        'device_data[locale]': opts['deviceDataLocale']
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = LoginObject;

      return this.apiClient.callApi(
        '/users/login/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordRequest operation.
     * @callback module:api/UsersApi~passwordRequestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordRequestResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Request Password
     * Request a New Password. Email will be sent with resset password link.
     * @param {String} email Email
     * @param {module:model/String} deviceDataDeviceName Device Name (Predefined Device Type - iPhone, Android, etc.)
     * @param {String} deviceDataDeviceId Device Id (Unique Device Identificator)
     * @param {Object} opts Optional parameters
     * @param {String} opts.deviceDataAppVersion Application Version (Mandatory)
     * @param {module:api/UsersApi~passwordRequestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordRequestResult}
     */
    this.passwordRequest = function(email, deviceDataDeviceName, deviceDataDeviceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email == undefined || email == null) {
        throw new Error("Missing the required parameter 'email' when calling passwordRequest");
      }

      // verify the required parameter 'deviceDataDeviceName' is set
      if (deviceDataDeviceName == undefined || deviceDataDeviceName == null) {
        throw new Error("Missing the required parameter 'deviceDataDeviceName' when calling passwordRequest");
      }

      // verify the required parameter 'deviceDataDeviceId' is set
      if (deviceDataDeviceId == undefined || deviceDataDeviceId == null) {
        throw new Error("Missing the required parameter 'deviceDataDeviceId' when calling passwordRequest");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'email': email,
        'device_data[device_name]': deviceDataDeviceName,
        'device_data[device_id]': deviceDataDeviceId,
        'device_data[app_version]': opts['deviceDataAppVersion']
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = PasswordRequestResult;

      return this.apiClient.callApi(
        '/users/password/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the passwordReset operation.
     * @callback module:api/UsersApi~passwordResetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PasswordResetResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Password Reset
     * Password Reset API call
     * @param {String} token Token (Reset Password Token)
     * @param {String} password Password
     * @param {String} confirmPassword Confirm Password
     * @param {module:api/UsersApi~passwordResetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PasswordResetResult}
     */
    this.passwordReset = function(token, password, confirmPassword, callback) {
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling passwordReset");
      }

      // verify the required parameter 'password' is set
      if (password == undefined || password == null) {
        throw new Error("Missing the required parameter 'password' when calling passwordReset");
      }

      // verify the required parameter 'confirmPassword' is set
      if (confirmPassword == undefined || confirmPassword == null) {
        throw new Error("Missing the required parameter 'confirmPassword' when calling passwordReset");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token
      };
      var headerParams = {
      };
      var formParams = {
        'password': password,
        'confirm_password': confirmPassword
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = PasswordResetResult;

      return this.apiClient.callApi(
        '/users/password/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the registerUser operation.
     * @callback module:api/UsersApi~registerUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RegisterResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register user
     * Register a New User
     * @param {String} email Email
     * @param {module:model/String} deviceDataDeviceName Device Name (Predefined Device Type - iPhone, Android, etc.)
     * @param {String} deviceDataDeviceId Device Id (Unique Device Identificator)
     * @param {Object} opts Optional parameters
     * @param {String} opts.password Password
     * @param {Number} opts.genPassword Generate Password
     * @param {String} opts.firstName First Name
     * @param {String} opts.lastName Last Name
     * @param {module:model/String} opts.type User Type
     * @param {String} opts.gender Gender
     * @param {String} opts.phone Phone
     * @param {String} opts.deviceDataAppVersion Application Version (Mandatory)
     * @param {String} opts.deviceDataOsName OS Name
     * @param {String} opts.deviceDataOsVersion OS Version Number
     * @param {String} opts.deviceDataProcesors Device Processors
     * @param {String} opts.deviceDataMacaddress Device Macaddress
     * @param {String} opts.deviceDataArchitecture Device Architecture
     * @param {String} opts.deviceDataLocale Device Locale
     * @param {module:api/UsersApi~registerUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RegisterResult}
     */
    this.registerUser = function(email, deviceDataDeviceName, deviceDataDeviceId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'email' is set
      if (email == undefined || email == null) {
        throw new Error("Missing the required parameter 'email' when calling registerUser");
      }

      // verify the required parameter 'deviceDataDeviceName' is set
      if (deviceDataDeviceName == undefined || deviceDataDeviceName == null) {
        throw new Error("Missing the required parameter 'deviceDataDeviceName' when calling registerUser");
      }

      // verify the required parameter 'deviceDataDeviceId' is set
      if (deviceDataDeviceId == undefined || deviceDataDeviceId == null) {
        throw new Error("Missing the required parameter 'deviceDataDeviceId' when calling registerUser");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
        'email': email,
        'password': opts['password'],
        'gen_password': opts['genPassword'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'type': opts['type'],
        'gender': opts['gender'],
        'phone': opts['phone'],
        'device_data[device_name]': deviceDataDeviceName,
        'device_data[device_id]': deviceDataDeviceId,
        'device_data[app_version]': opts['deviceDataAppVersion'],
        'device_data[os_name]': opts['deviceDataOsName'],
        'device_data[os_version]': opts['deviceDataOsVersion'],
        'device_data[procesors]': opts['deviceDataProcesors'],
        'device_data[macaddress]': opts['deviceDataMacaddress'],
        'device_data[architecture]': opts['deviceDataArchitecture'],
        'device_data[locale]': opts['deviceDataLocale']
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = RegisterResult;

      return this.apiClient.callApi(
        '/users/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateUser operation.
     * @callback module:api/UsersApi~updateUserCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UserResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update user
     * Update User
     * @param {String} token Token
     * @param {Object} opts Optional parameters
     * @param {String} opts.email Email
     * @param {String} opts.password Password
     * @param {String} opts.firstName First Name
     * @param {String} opts.lastName Last Name
     * @param {module:model/String} opts.type User Type
     * @param {String} opts.gender Gender
     * @param {String} opts.phone Phone
     * @param {module:api/UsersApi~updateUserCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UserResult}
     */
    this.updateUser = function(token, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'token' is set
      if (token == undefined || token == null) {
        throw new Error("Missing the required parameter 'token' when calling updateUser");
      }


      var pathParams = {
      };
      var queryParams = {
        'token': token
      };
      var headerParams = {
      };
      var formParams = {
        'email': opts['email'],
        'password': opts['password'],
        'first_name': opts['firstName'],
        'last_name': opts['lastName'],
        'type': opts['type'],
        'gender': opts['gender'],
        'phone': opts['phone']
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/api+json', 'application/api+xml', 'application/api+jsonp'];
      var returnType = UserResult;

      return this.apiClient.callApi(
        '/users/', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
